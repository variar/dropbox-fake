#!/usr/bin/env node
require('dotenv').load();

var logger = require('../lib/logger');

var app = require('../app');
var database = require('../lib/database');
var debug = require('debug')('dropbox-fake:server');
var http = require('http');
var https = require('https');
var fs = require('fs-extra');
var Q = require('q');

var httpPort = normalizePort(process.env.PORT || '3000');
var httpsPort = normalizePort(process.env.PORT_S || '3001');
app.set('httpPort', httpPort);
app.set('httpsPort', httpsPort);

database.load().then(function() {
  console.info('HTTP', httpPort, 'HTTPS', httpsPort);
  var server = http.createServer(app);
  server.listen(httpPort);
  server.on('error', onError(httpPort));

  var keys = { key:fs.readFileSync('./cert/dropbox_fake.key'),
    cert:fs.readFileSync('./cert/dropbox_fake.crt')
  };
  var serverS = https.createServer(keys, app);

  serverS.listen(httpsPort);
  serverS.on('error', onError(httpsPort));
})
.catch(function(err) {
  console.error(err);
});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(port) {
  return function(error) {
    console.error(error);
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  };
}
